<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-4.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 指定安全管理器 -->
		<property name="securityManager" ref="securityManager" />

		<!-- 如果没有认证将要跳转的登陆地址，http可访问的url，如果不在表单认证过虑器FormAuthenticationFilter中指定此地址就为身份认证地址 -->
		<!-- loginUrl认证提交地址，如果没有通过认证将会请求此地址进行认证，请求地址酱油formAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/goLogin" />
        <property name="successUrl" value="/index"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <property name="filters">
            <util:map>
                <entry key="authc">
                    <bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry>
                <!-- <entry key="kickout" value-ref="kickoutSessionControlFilter"/>  -->
            </util:map>
        </property>
		<!-- 真正的filter，也是过滤链，从上向下顺序执行，一般都将/**放在最下边 -->
		<property name="filterChainDefinitions">
			<value>
				/goLogin = anon
				/login = anon
				/static/* = anon
				<!-- 示例 
				/tiku/addQuestion.action = authc, roles["运营"]
				/tiku/addQuestion.action = authc, perms["question:error"]-->  
				/** = authc
				
			</value>
		</property>
	</bean>
	
    <!-- Post processor that automatically invokes init() and destroy() methods -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>


	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 注入realm -->
 		<property name="realm" ref="myRealm" />
		<property name="sessionManager" ref="sessionManager"/>
        <!-- <property name="cacheManager" ref="cacheManager"/> -->
	</bean>

 	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>


<!-- 	<bean id="kickoutSessionControlFilter" class="com.idoup.shiro.filter.KickoutSessionControlFilter">   -->
<!-- 	    <property name="cacheManager" ref="cacheManager"/> -->
<!--         <property name="sessionManager" ref="sessionManager"/> -->
<!-- 	    <property name="kickoutAfter" value="false"/>   -->
<!-- 	    <property name="maxSession" value="1"/>   -->
<!-- 	    <property name="kickoutUrl" value="/login"/>   -->
<!-- 	</bean>    -->
	
	 <!-- 缓存管理器 -->
   <!--  <bean id="cacheManager" class="org.ssm.dufy.filter.SpringCacheManagerWrapper">
        <property name="cacheManager" ref="springCacheManager"/>
    </bean> -->
	
	 <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>
    
    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
	
	<!-- <bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
    </bean> -->

    <!--ehcache-->
    <!-- <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean> -->
	
	<!-- 自定义 realm -->
 	<bean id="myRealm" class="org.ssm.dufy.realm.MyRealm"></bean>
</beans>